import streamlit as st
import pandas as pd
from datetime import datetime

# === C√°c h√†m t√≠nh to√°n g·ªëc c·ªßa b·∫°n ===
def calculate_weighted_average(rsiv_values, investments):
    total_investment = sum(investments)
    if total_investment == 0:
        raise ValueError("T·ªïng s·ªë ti·ªÅn ƒë·∫ßu t∆∞ kh√¥ng th·ªÉ b·∫±ng 0.")
    weights = [(investment / total_investment) * 100 for investment in investments]
    weighted_sum = sum(rsiv * (weight / 100) for rsiv, weight in zip(rsiv_values, weights))
    return weighted_sum, weights

def suggest_holding_ratio(safety_level, weighted_sum):
    suggested_ratio = safety_level * 10 * (weighted_sum / 50)
    return suggested_ratio

def analyze_weak_stocks(rsiv_values):
    weak_stocks = []
    for i, rsiv in enumerate(rsiv_values):
        if rsiv < 50:
            weak_stocks.append(f"C·ªï phi·∫øu {i+1} (RSIV = {rsiv:.2f})")
    return weak_stocks

def calculate_actual_weights(investments, cash_balance):
    total_portfolio_value = sum(investments) + cash_balance
    total_stock_weight = (sum(investments) / total_portfolio_value) * 100
    cash_weight = (cash_balance / total_portfolio_value) * 100
    return total_stock_weight, cash_weight, total_portfolio_value

def generate_recommendation(total_stock_weight, suggested_ratio, total_portfolio_value):
    difference = suggested_ratio - total_stock_weight
    if difference > 0:
        action = "TƒÉng"
        amount = total_portfolio_value * (difference / 100)
    elif difference < 0:
        action = "Gi·∫£m"
        amount = total_portfolio_value * (abs(difference) / 100)
    else:
        action = "Gi·ªØ nguy√™n"
        amount = 0
    return action, amount


# === Giao di·ªán Streamlit ===
st.markdown("""
<h2 style='text-align: center; color: #a259ff; margin-bottom: 0.01em;'>KH√ÅM S·ª®C KH·ªéE</h2>
<h2 style='text-align: center; color: #a259ff; margin-top: 0; margin-bottom: 0.1em;'>DANH M·ª§C C·ªî PHI·∫æU</h2>
""", unsafe_allow_html=True)

# Nh·∫≠p d·ªØ li·ªáu


n_safety_col1, n_safety_col2 = st.columns([2, 5])
with n_safety_col1:
    safety_level = st.number_input("Nh·∫≠p m·ª©c an to√†n c·ªßa Vnindex (0-9):", min_value=0, max_value=9, step=1, value=None, placeholder="", key="safety_level")
with n_safety_col2:
    if safety_level is not None:
        if safety_level >= 5:
            st.markdown(f"<div style='background-color:#d4edda; color:#155724; border-radius:6px; padding:0.5em 1em; display:inline-block;'>M·ª©c an to√†n: <b>{safety_level}</b> (An to√†n)</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div style='background-color:#f8d7da; color:#721c24; border-radius:6px; padding:0.5em 1em; display:inline-block;'>M·ª©c an to√†n: <b>{safety_level}</b> (C·∫£nh b√°o th·∫•p)</div>", unsafe_allow_html=True)
n = st.number_input("S·ªë l∆∞·ª£ng c·ªï phi·∫øu trong danh m·ª•c c·ªßa b·∫°n:", min_value=1, step=1, value=None, placeholder="")
cash_balance = st.number_input("Nh·∫≠p s·ªë ti·ªÅn m·∫∑t hi·ªán c√≥ (tri·ªáu):", min_value=0, step=1, value=None, format="%d", placeholder="Nh·∫≠p s·ªë ti·ªÅn m·∫∑t (tri·ªáu)")


# Nh·∫≠p t·ª´ng th√†nh ph·∫ßn cho t·ª´ng c·ªï phi·∫øu
rsiv_values = []
investments = []
for i in range(int(n) if n else 0):
    col1, col2 = st.columns([2,1])
    with col1:
        rsiv = st.number_input(f"RSIV c·ªßa c·ªï phi·∫øu {i+1}:", min_value=0, step=1, value=None, format="%d", placeholder="Nh·∫≠p RSIV", key=f"rsiv_{i}")
    with col2:
        if rsiv is not None:
            if rsiv >= 50:
                st.markdown("""
                <div style='background-color:#28a745; color:white; border-radius:6px; height:2.4em; margin-top:0.4em; display:flex; align-items:center; justify-content:center; font-weight:bold;'>
                    Kh√° h∆°n Vnindex
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div style='background-color:#dc3545; color:white; border-radius:6px; height:2.4em; margin-top:0.4em; display:flex; align-items:center; justify-content:center; font-weight:bold;'>
                    Y·∫øu h∆°n Vnindex
                </div>
                """, unsafe_allow_html=True)
    invest = st.number_input(f"S·ªë ti·ªÅn ƒë·∫ßu t∆∞ cho c·ªï phi·∫øu {i+1} (tri·ªáu):", min_value=0, step=1, value=None, format="%d", placeholder="Nh·∫≠p s·ªë ti·ªÅn (tri·ªáu)", key=f"invest_{i}")
    rsiv_values.append(rsiv)
    investments.append(invest)

if st.button("T√≠nh to√°n"):
    from fpdf import FPDF
    import tempfile

    try:
        weighted_sum, _ = calculate_weighted_average(rsiv_values, investments)
        suggested_ratio = suggest_holding_ratio(safety_level, weighted_sum)
        total_stock_weight, cash_weight, total_portfolio_value = calculate_actual_weights(investments, cash_balance)
        action, amount = generate_recommendation(total_stock_weight, suggested_ratio, total_portfolio_value)
        weak_stocks = analyze_weak_stocks(rsiv_values)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
        now = (datetime.now() + pd.Timedelta(hours=7)).strftime("%Y-%m-%d %H:%M:%S")
        st.subheader("=== K·∫æT QU·∫¢ ===")
        st.write(f"üìÖ Th·ªùi gian t√≠nh to√°n: {now}")
        st.write(f"Gi√° tr·ªã trung b√¨nh RSIV c·ªßa danh m·ª•c: {weighted_sum:.2f}")
        # Nh·∫≠n x√©t v·ªÅ RSIV danh m·ª•c so v·ªõi th·ªã tr∆∞·ªùng chung
        if weighted_sum > 50:
            st.success("Nh·∫≠n x√©t: Danh m·ª•c n√†y ƒëang kh√° h∆°n th·ªã tr∆∞·ªùng chung (RSIV > 50).")
        else:
            st.warning("Nh·∫≠n x√©t: Danh m·ª•c n√†y ƒëang y·∫øu h∆°n th·ªã tr∆∞·ªùng chung (RSIV ‚â§ 50).")
        st.write(f"T·ª∑ tr·ªçng g·ª£i √Ω n·∫Øm gi·ªØ: {suggested_ratio:.2f}%")
        st.write(f"T·ªïng gi√° tr·ªã danh m·ª•c hi·ªán t·∫°i: {total_portfolio_value:.2f}")
        st.write(f"T·ª∑ tr·ªçng th·ª±c t·∫ø c·ªßa c·ªï phi·∫øu: {total_stock_weight:.2f}%")
        st.write(f"T·ª∑ tr·ªçng ti·ªÅn m·∫∑t: {cash_weight:.2f}%")
        st.write(f"G·ª£i √Ω ƒëi·ªÅu ch·ªânh: **{action}** t·ª∑ tr·ªçng c·ªï phi·∫øu v·ªõi s·ªë ti·ªÅn = {amount:.2f}")

        # T·∫°o file PDF k·∫øt qu·∫£


        pdf = FPDF()
        pdf.add_page()
        # S·ª≠ d·ª•ng font Unicode NotoSans-Regular.ttf trong th∆∞ m·ª•c d·ª± √°n
        pdf.add_font('NotoSans', '', 'NotoSans-Regular.ttf', uni=True)
        pdf.set_font('NotoSans', '', 14)
        pdf.set_text_color(162, 89, 255)
        pdf.cell(0, 10, "KH√ÅM S·ª®C KH·ªéE DANH M·ª§C C·ªî PHI·∫æU", ln=True, align="C")
        pdf.set_text_color(0,0,0)
        pdf.set_font('NotoSans', '', 12)
        pdf.cell(0, 10, f"Th·ªùi gian t√≠nh to√°n: {now}", ln=True)
        pdf.cell(0, 10, f"Gi√° tr·ªã trung b√¨nh RSIV c·ªßa danh m·ª•c: {weighted_sum:.2f}", ln=True)
        if weighted_sum > 50:
            pdf.set_text_color(40,167,69)
            pdf.cell(0, 10, "Nh·∫≠n x√©t: Danh m·ª•c n√†y ƒëang kh√° h∆°n th·ªã tr∆∞·ªùng chung (RSIV > 50)", ln=True)
        else:
            pdf.set_text_color(220,53,69)
            pdf.cell(0, 10, "Nh·∫≠n x√©t: Danh m·ª•c n√†y ƒëang y·∫øu h∆°n th·ªã tr∆∞·ªùng chung (RSIV ‚â§ 50)", ln=True)
        pdf.set_text_color(0,0,0)
        pdf.cell(0, 10, f"T·ª∑ tr·ªçng g·ª£i √Ω n·∫Øm gi·ªØ: {suggested_ratio:.2f}%", ln=True)
        pdf.cell(0, 10, f"T·ªïng gi√° tr·ªã danh m·ª•c hi·ªán t·∫°i: {total_portfolio_value:.2f}", ln=True)
        pdf.cell(0, 10, f"T·ª∑ tr·ªçng th·ª±c t·∫ø c·ªßa c·ªï phi·∫øu: {total_stock_weight:.2f}%", ln=True)
        pdf.cell(0, 10, f"T·ª∑ tr·ªçng ti·ªÅn m·∫∑t: {cash_weight:.2f}%", ln=True)
        pdf.cell(0, 10, f"G·ª£i √Ω ƒëi·ªÅu ch·ªânh: {action} t·ª∑ tr·ªçng c·ªï phi·∫øu v·ªõi s·ªë ti·ªÅn = {amount:.2f}", ln=True)

        # Nh·∫≠n x√©t c·ªï phi·∫øu y·∫øu
        if weak_stocks:
            pdf.set_text_color(220,53,69)
            pdf.cell(0, 10, "C·ªî PHI·∫æU Y·∫æU:", ln=True)
            pdf.set_text_color(0,0,0)
            for stock in weak_stocks:
                pdf.cell(0, 10, f"- {stock}", ln=True)
        else:
            pdf.set_text_color(40,167,69)
            pdf.cell(0, 10, "Kh√¥ng c√≥ c·ªï phi·∫øu n√†o y·∫øu h∆°n Vnindex (t·∫•t c·∫£ ƒë·ªÅu c√≥ RSIV >= 50)", ln=True)
        pdf.set_text_color(0,0,0)

        # L∆∞u PDF ra file t·∫°m
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_pdf:
            pdf.output(tmp_pdf.name)
            tmp_pdf.seek(0)
            pdf_data = tmp_pdf.read()

        # Nh·∫≠n x√©t c·ªï phi·∫øu y·∫øu
        if weak_stocks:
            st.subheader("= C·ªî PHI·∫æU Y·∫æU =")
            st.write("C√°c c·ªï phi·∫øu sau ƒë√¢y ƒëang y·∫øu h∆°n so v·ªõi Vnindex:")
            for stock in weak_stocks:
                st.write(f"- {stock}: N√™n chuy·ªÉn sang c·ªï phi·∫øu kh·ªèe h∆°n Vnindex, c√≥ s·ª©c m·∫°nh n·ªôi t·∫°i HL ƒë·∫£m b·∫£o v√† c√≥ ƒëi·ªÉm v√†o theo ph∆∞∆°ng ph√°p.")
        else:
            st.subheader("= NH·∫¨N X√âT V·ªÄ C·ªî PHI·∫æU =")
            st.write("Kh√¥ng c√≥ c·ªï phi·∫øu n√†o y·∫øu h∆°n Vnindex (t·∫•t c·∫£ ƒë·ªÅu c√≥ RSIV >= 50).")

        # N√∫t t·∫£i PDF ƒë·∫∑t d∆∞·ªõi c√πng
        st.markdown("""
<style>
#custom-download-btn button {
    background: #1976d2;
    color: white;
    font-size: 1.1em;
    font-weight: bold;
    border-radius: 8px;
    border: none;
    padding: 0.7em 2em;
    box-shadow: 0 2px 8px rgba(25,118,210,0.18);
    transition: background 0.2s, transform 0.1s;
    margin-top: 1.5em;
}
#custom-download-btn button:hover {
    background: #0d47a1;
    transform: scale(1.05);
}
</style>
        """, unsafe_allow_html=True)
        st.download_button(
            label="üìÑ T·∫£i xu·ªëng k·∫øt qu·∫£ PDF",
            data=pdf_data,
            file_name="ket_qua_danh_muc.pdf",
            mime="application/pdf",
            key="custom-download-btn"
        )

        # ...b·ªè ph·∫ßn xu·∫•t file CSV...

    except ValueError as e:
        st.error(f"L·ªói: {e}")
        
