import streamlit as st
import pandas as pd
from datetime import datetime

# === C√°c h√†m t√≠nh to√°n g·ªëc c·ªßa b·∫°n ===
def calculate_weighted_average(rsiv_values, investments):
    total_investment = sum(investments)
    if total_investment == 0:
        raise ValueError("T·ªïng s·ªë ti·ªÅn ƒë·∫ßu t∆∞ kh√¥ng th·ªÉ b·∫±ng 0.")
    weights = [(investment / total_investment) * 100 for investment in investments]
    weighted_sum = sum(rsiv * (weight / 100) for rsiv, weight in zip(rsiv_values, weights))
    return weighted_sum, weights

def suggest_holding_ratio(safety_level, weighted_sum):
    suggested_ratio = safety_level * 10 * (weighted_sum / 50)
    return suggested_ratio

def analyze_weak_stocks(rsiv_values):
    weak_stocks = []
    for i, rsiv in enumerate(rsiv_values):
        if rsiv < 50:
            weak_stocks.append(f"C·ªï phi·∫øu {i+1} (RSIV = {rsiv:.2f})")
    return weak_stocks

def calculate_actual_weights(investments, cash_balance):
    total_portfolio_value = sum(investments) + cash_balance
    total_stock_weight = (sum(investments) / total_portfolio_value) * 100
    cash_weight = (cash_balance / total_portfolio_value) * 100
    return total_stock_weight, cash_weight, total_portfolio_value

def generate_recommendation(total_stock_weight, suggested_ratio, total_portfolio_value):
    difference = suggested_ratio - total_stock_weight
    if difference > 0:
        action = "TƒÉng"
        amount = total_portfolio_value * (difference / 100)
    elif difference < 0:
        action = "Gi·∫£m"
        amount = total_portfolio_value * (abs(difference) / 100)
    else:
        action = "Gi·ªØ nguy√™n"
        amount = 0
    return action, amount


# === Giao di·ªán Streamlit ===
st.markdown("<h1 style='text-align: center;'>üìä CH∆Ø∆†NG TR√åNH KI·ªÇM TRA S·ª®C KH·ªéE DANH M·ª§C</h1>", unsafe_allow_html=True)

# Nh·∫≠p d·ªØ li·ªáu


safety_level = st.number_input("Nh·∫≠p m·ª©c an to√†n c·ªßa Vnindex (0-9):", min_value=0, max_value=9, step=1, value=None, placeholder="")
n = st.number_input("S·ªë l∆∞·ª£ng c·ªï phi·∫øu trong danh m·ª•c c·ªßa b·∫°n:", min_value=1, step=1, value=None, placeholder="")
cash_balance = st.number_input("Nh·∫≠p s·ªë ti·ªÅn m·∫∑t hi·ªán c√≥ (tri·ªáu):", min_value=0, step=1, value=None, format="%d", placeholder="Nh·∫≠p s·ªë ti·ªÅn m·∫∑t (tri·ªáu)")


# Nh·∫≠p t·ª´ng th√†nh ph·∫ßn cho t·ª´ng c·ªï phi·∫øu
rsiv_values = []
investments = []
for i in range(int(n) if n else 0):
    rsiv = st.number_input(f"RSIV c·ªßa c·ªï phi·∫øu {i+1}:", min_value=0, step=1, value=None, format="%d", placeholder="Nh·∫≠p RSIV", key=f"rsiv_{i}")
    invest = st.number_input(f"S·ªë ti·ªÅn ƒë·∫ßu t∆∞ cho c·ªï phi·∫øu {i+1} (tri·ªáu):", min_value=0, step=1, value=None, format="%d", placeholder="Nh·∫≠p s·ªë ti·ªÅn (tri·ªáu)", key=f"invest_{i}")
    rsiv_values.append(rsiv)
    investments.append(invest)

if st.button("T√≠nh to√°n"):
    try:
        weighted_sum, _ = calculate_weighted_average(rsiv_values, investments)
        suggested_ratio = suggest_holding_ratio(safety_level, weighted_sum)
        total_stock_weight, cash_weight, total_portfolio_value = calculate_actual_weights(investments, cash_balance)
        action, amount = generate_recommendation(total_stock_weight, suggested_ratio, total_portfolio_value)
        weak_stocks = analyze_weak_stocks(rsiv_values)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        st.subheader("=== K·∫æT QU·∫¢ ===")
        st.write(f"üìÖ Th·ªùi gian t√≠nh to√°n: {now}")
        st.write(f"Gi√° tr·ªã trung b√¨nh RSIV c·ªßa danh m·ª•c: {weighted_sum:.2f}")
        st.write(f"T·ª∑ tr·ªçng g·ª£i √Ω n·∫Øm gi·ªØ: {suggested_ratio:.2f}%")
        st.write(f"T·ªïng gi√° tr·ªã danh m·ª•c hi·ªán t·∫°i: {total_portfolio_value:.2f}")
        st.write(f"T·ª∑ tr·ªçng th·ª±c t·∫ø c·ªßa c·ªï phi·∫øu: {total_stock_weight:.2f}%")
        st.write(f"T·ª∑ tr·ªçng ti·ªÅn m·∫∑t: {cash_weight:.2f}%")
        st.write(f"G·ª£i √Ω ƒëi·ªÅu ch·ªânh: **{action}** t·ª∑ tr·ªçng c·ªï phi·∫øu v·ªõi s·ªë ti·ªÅn = {amount:.2f}")

        # Nh·∫≠n x√©t c·ªï phi·∫øu y·∫øu
        if weak_stocks:
            st.subheader("= NH·∫¨N X√âT V·ªÄ C·ªî PHI·∫æU Y·∫æU =")
            st.write("C√°c c·ªï phi·∫øu sau ƒë√¢y ƒëang y·∫øu h∆°n so v·ªõi Vnindex:")
            for stock in weak_stocks:
                st.write(f"- {stock}: N√™n chuy·ªÉn sang c·ªï phi·∫øu kh·ªèe h∆°n Vnindex, c√≥ s·ª©c m·∫°nh n·ªôi t·∫°i HL ƒë·∫£m b·∫£o v√† c√≥ ƒëi·ªÉm v√†o theo ph∆∞∆°ng ph√°p.")
        else:
            st.subheader("=== NH·∫¨N X√âT V·ªÄ C·ªî PHI·∫æU ===")
            st.write("Kh√¥ng c√≥ c·ªï phi·∫øu n√†o y·∫øu h∆°n Vnindex (t·∫•t c·∫£ ƒë·ªÅu c√≥ RSIV >= 50).")


        # ...b·ªè ph·∫ßn xu·∫•t file CSV...

    except ValueError as e:
        st.error(f"L·ªói: {e}")
        
